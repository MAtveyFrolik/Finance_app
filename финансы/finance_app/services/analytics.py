import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from models.user import User
from typing import List, Dict
import tkinter as tk
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class AnalyticsService:
    def __init__(self, user: User):
        self.user = user
    
    def get_spending_by_category(self, period: str = 'month') -> pd.Series:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pandas"""
        df = self.user.get_transactions_dataframe()
        
        if df.empty:
            return pd.Series()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
        now = datetime.now()
        if period == 'month':
            start_date = now - timedelta(days=30)
        elif period == 'week':
            start_date = now - timedelta(days=7)
        else:
            start_date = df['date'].min()
        
        filtered_df = df[df['date'] >= start_date]
        expense_df = filtered_df[filtered_df['type'] == 'expense']
        
        if expense_df.empty:
            return pd.Series()
        
        return expense_df.groupby('category')['amount'].sum()
    
    def get_income_vs_expense(self) -> Dict[str, float]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        df = self.user.get_transactions_dataframe()
        
        if df.empty:
            return {"income": 0, "expense": 0}
        
        income = df[df['type'] == 'income']['amount'].sum()
        expense = df[df['type'] == 'expense']['amount'].sum()
        
        return {"income": income, "expense": expense}
    
    def create_pie_chart(self, parent, period: str = 'month'):
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ Tkinter"""
        spending_data = self.get_spending_by_category(period)
        
        if spending_data.empty:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
            fig, ax = plt.subplots(figsize=(6, 4))
            ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö', 
                   horizontalalignment='center', verticalalignment='center',
                   transform=ax.transAxes, fontsize=12)
            ax.set_title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
        else:
            fig, ax = plt.subplots(figsize=(6, 4))
            colors = ['#e74c3c', '#e67e22', '#f39c12', '#d35400', '#c0392b', '#8e44ad']
            
            wedges, texts, autotexts = ax.pie(
                spending_data.values, 
                labels=spending_data.index,
                autopct='%1.1f%%',
                colors=colors[:len(spending_data)]
            )
            
            ax.set_title(f'–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ({period})')
        
        canvas = FigureCanvasTkAgg(fig, parent)
        canvas.draw()
        return canvas.get_tk_widget()
    
    def create_income_expense_chart(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–æ—Ö–æ–¥–æ–≤ vs —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        data = self.get_income_vs_expense()
        
        fig, ax = plt.subplots(figsize=(6, 4))
        
        categories = ['–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã']
        values = [data['income'], data['expense']]
        colors = ['#2ecc71', '#e74c3c']
        
        bars = ax.bar(categories, values, color=colors, alpha=0.7)
        ax.set_title('–î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã')
        ax.set_ylabel('–°—É–º–º–∞ (—Ä—É–±)')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for bar, value in zip(bars, values):
            ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max(values)*0.01,
                   f'{value:.2f}', ha='center', va='bottom')
        
        canvas = FigureCanvasTkAgg(fig, parent)
        canvas.draw()
        return canvas.get_tk_widget()
    
    def generate_economy_tips(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö"""
        tips = []
        summary = self.user.get_financial_summary()
        spending = self.get_spending_by_category()
        
        # –ê–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Pandas
        df = self.user.get_transactions_dataframe()
        
        if not df.empty:
            # –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞
            if summary['balance'] < 0:
                tips.append("üö® –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –°—Ä–æ—á–Ω–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç!")
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
            if not spending.empty:
                max_spending = spending.nlargest(2)
                for category, amount in max_spending.items():
                    tips.append(f"üí∞ –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {category} - {amount:.2f} —Ä—É–±.")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –¥–æ—Ö–æ–¥–æ–≤
            income_dates = df[df['type'] == 'income']['date']
            if len(income_dates) > 1:
                date_diff = (income_dates.max() - income_dates.min()).days
                if date_diff > 60 and len(income_dates) < 3:
                    tips.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞")
        
        # –û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã
        if not tips:
            tips.extend([
                "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ.",
                "üí° –°–æ–≤–µ—Ç: –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 10-20% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–æ—Ö–æ–¥–∞",
                "üí° –°–æ–≤–µ—Ç: –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥"
            ])
        else:
            tips.extend([
                "üí° –°–æ–≤–µ—Ç: –í–µ–¥–∏—Ç–µ —É—á–µ—Ç –≤—Å–µ—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤",
                "üí° –°–æ–≤–µ—Ç: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ª–∏–º–∏—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤"
            ])
        
        return tips