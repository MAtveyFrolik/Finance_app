import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
from datetime import datetime

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class Category:
    def __init__(self, name, type_):
        self.name = name
        self.type = type_

# –ö–ª–∞—Å—Å –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
class Transaction:
    def __init__(self, amount, category, description=""):
        self.amount = amount
        self.category = category
        self.date = datetime.now()
        self.description = description
    
    def to_dict(self):
        return {
            "amount": self.amount,
            "category": self.category.name,
            "date": self.date.isoformat(),
            "description": self.description,
            "type": self.category.type
        }

# –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User:
    def __init__(self, username):
        self.username = username
        self.transactions = []
    
    def add_transaction(self, transaction):
        self.transactions.append(transaction)
    
    def get_balance(self):
        income = sum(t.amount for t in self.transactions if t.category.type == 'income')
        expense = sum(t.amount for t in self.transactions if t.category.type == 'expense')
        return income - expense

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
class DataManager:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        self.data_file = os.path.join(desktop_path, "finance_data.json")
        self.categories = [
            Category("–ó–∞—Ä–ø–ª–∞—Ç–∞", "income"),
            Category("–§—Ä–∏–ª–∞–Ω—Å", "income"),
            Category("–ü—Ä–æ–¥—É–∫—Ç—ã", "expense"),
            Category("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "expense"),
            Category("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "expense"),
            Category("–ñ–∏–ª—å–µ", "expense")
        ]
    
    def save_user(self, user):
        try:
            data = {
                "username": user.username,
                "transactions": [t.to_dict() for t in user.transactions]
            }
            
            all_data = {}
            if os.path.exists(self.data_file):
                try:
                    with open(self.data_file, 'r', encoding='utf-8') as f:
                        all_data = json.load(f)
                except:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    all_data = {}
            
            all_data[user.username] = data
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(all_data, f, ensure_ascii=False, indent=2)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def load_user(self, username):
        if not os.path.exists(self.data_file):
            return None
        
        try:
            with open(self.data_file, 'r', encoding='utf-8') as f:
                all_data = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return None
        
        if username not in all_data:
            return None
        
        user_data = all_data[username]
        user = User(username)
        
        for t_data in user_data.get("transactions", []):
            category = next((c for c in self.categories if c.name == t_data["category"]), None)
            if category:
                transaction = Transaction(
                    amount=float(t_data["amount"]),
                    category=category,
                    description=t_data.get("description", "")
                )
                user.transactions.append(transaction)
        
        return user

# –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class FinanceApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üí∞ –£—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤")
        self.root.geometry("600x500")
        
        self.data_manager = DataManager()
        self.current_user = None
        
        self.show_login_screen()
    
    def show_login_screen(self):
        # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.root, text="–£—á–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤", font=("Arial", 16, "bold"))
        title.pack(pady=20)
        
        # –§—Ä–µ–π–º –¥–ª—è —Ñ–æ—Ä–º—ã
        form_frame = tk.Frame(self.root)
        form_frame.pack(pady=20)
        
        # –õ–æ–≥–∏–Ω
        tk.Label(form_frame, text="–õ–æ–≥–∏–Ω:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.username_entry = tk.Entry(form_frame, width=20)
        self.username_entry.grid(row=0, column=1, padx=5, pady=5)
        
        # –ü–∞—Ä–æ–ª—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        tk.Label(form_frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.password_entry = tk.Entry(form_frame, width=20, show="*")
        self.password_entry.grid(row=1, column=1, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=20)
        
        tk.Button(button_frame, text="–í–æ–π—Ç–∏", command=self.login, width=10).pack(side="left", padx=5)
        tk.Button(button_frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", command=self.register, width=10).pack(side="left", padx=5)
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥–∏–Ω–∞
        self.username_entry.focus()
    
    def login(self):
        username = self.username_entry.get().strip()
        
        if not username:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
            return
        
        user = self.data_manager.load_user(username)
        if user:
            self.current_user = user
            self.show_main_screen()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def register(self):
        username = self.username_entry.get().strip()
        
        if not username:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if self.data_manager.load_user(username):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(username)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if self.data_manager.save_user(user):
                self.current_user = user
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!")
                self.show_main_screen()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
    
    def show_main_screen(self):
        # –û—á–∏—â–∞–µ–º –æ–∫–Ω–æ
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_frame = tk.Frame(self.root)
        top_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(top_frame, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user.username}", 
                font=("Arial", 10, "bold")).pack(side="left")
        
        self.balance_label = tk.Label(top_frame, text="", font=("Arial", 10, "bold"))
        self.balance_label.pack(side="right")
        
        tk.Button(top_frame, text="–í—ã–π—Ç–∏", command=self.show_login_screen).pack(side="right", padx=5)
        
        # –í–∫–ª–∞–¥–∫–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transaction_frame = ttk.Frame(notebook)
        notebook.add(transaction_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        self.create_transaction_tab(transaction_frame)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–∞
        report_frame = ttk.Frame(notebook)
        notebook.add(report_frame, text="–û—Ç—á–µ—Ç")
        self.create_report_tab(report_frame)
        
        self.update_balance()
        self.update_report()
    
    def create_transaction_tab(self, parent):
        # –û—á–∏—â–∞–µ–º —Ñ—Ä–µ–π–º
        for widget in parent.winfo_children():
            widget.destroy()
            
        tk.Label(parent, text="–¢–∏–ø:").pack(anchor="w", pady=5)
        
        self.type_var = tk.StringVar(value="expense")
        type_frame = tk.Frame(parent)
        type_frame.pack(fill="x", pady=5)
        
        tk.Radiobutton(type_frame, text="–†–∞—Å—Ö–æ–¥", variable=self.type_var, value="expense").pack(side="left")
        tk.Radiobutton(type_frame, text="–î–æ—Ö–æ–¥", variable=self.type_var, value="income").pack(side="left")
        
        tk.Label(parent, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:").pack(anchor="w", pady=5)
        self.category_var = tk.StringVar()
        self.category_combo = ttk.Combobox(parent, textvariable=self.category_var, state="readonly")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞
        def update_categories(*args):
            categories = [c.name for c in self.data_manager.categories if c.type == self.type_var.get()]
            self.category_combo['values'] = categories
            if categories:
                self.category_combo.set(categories[0])
        
        self.type_var.trace('w', update_categories)
        update_categories()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        
        self.category_combo.pack(fill="x", pady=5)
        
        tk.Label(parent, text="–°—É–º–º–∞:").pack(anchor="w", pady=5)
        self.amount_entry = tk.Entry(parent)
        self.amount_entry.pack(fill="x", pady=5)
        
        tk.Label(parent, text="–û–ø–∏—Å–∞–Ω–∏–µ:").pack(anchor="w", pady=5)
        self.desc_entry = tk.Entry(parent)
        self.desc_entry.pack(fill="x", pady=5)
        
        tk.Button(parent, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_transaction, bg="lightblue").pack(pady=10)
    
    def create_report_tab(self, parent):
        self.report_text = tk.Text(parent, wrap="word", height=15)
        scrollbar = ttk.Scrollbar(parent, orient="vertical", command=self.report_text.yview)
        self.report_text.configure(yscrollcommand=scrollbar.set)
        
        self.report_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        tk.Button(parent, text="–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç", command=self.update_report).pack(pady=5)
    
    def add_transaction(self):
        try:
            amount = float(self.amount_entry.get())
            category_name = self.category_var.get()
            description = self.desc_entry.get()
            
            if amount <= 0:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return
            
            if not category_name:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                return
            
            category = next((c for c in self.data_manager.categories if c.name == category_name), None)
            if not category:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                return
            
            transaction = Transaction(amount, category, description)
            self.current_user.add_transaction(transaction)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if self.data_manager.save_user(self.current_user):
                self.amount_entry.delete(0, tk.END)
                self.desc_entry.delete(0, tk.END)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                
                self.update_balance()
                self.update_report()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
            
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞: {str(e)}")
    
    def update_balance(self):
        balance = self.current_user.get_balance()
        balance_text = f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±."
        if balance >= 0:
            self.balance_label.config(text=balance_text, fg="green")
        else:
            self.balance_label.config(text=balance_text, fg="red")
    
    def update_report(self):
        self.report_text.delete(1.0, tk.END)
        
        balance = self.current_user.get_balance()
        income = sum(t.amount for t in self.current_user.transactions if t.category.type == 'income')
        expense = sum(t.amount for t in self.current_user.transactions if t.category.type == 'expense')
        
        report = f"""üìä –§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–ï–¢

–î–æ—Ö–æ–¥—ã: {income:.2f} —Ä—É–±.
–†–∞—Å—Ö–æ–¥—ã: {expense:.2f} —Ä—É–±.
–ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.

–ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:
"""
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
        recent_transactions = self.current_user.transactions[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for t in reversed(recent_transactions):
            type_icon = "‚¨ÜÔ∏è" if t.category.type == 'income' else "‚¨áÔ∏è"
            report += f"{type_icon} {t.date.strftime('%d.%m %H:%M')} - {t.category.name}: {t.amount:.2f} —Ä—É–±."
            if t.description:
                report += f" ({t.description})"
            report += "\n"
        
        # –°–æ–≤–µ—Ç—ã
        report += "\nüí° –°–û–í–ï–¢–´:\n"
        if balance < 0:
            report += "‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ! –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –¥–æ—Ö–æ–¥—ã\n"
        if expense > income * 0.7 and income > 0:
            report += "‚Ä¢ –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (>70% –¥–æ—Ö–æ–¥–æ–≤)\n"
        if len(self.current_user.transactions) < 3:
            report += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
        
        if balance >= 0 and (income == 0 or expense <= income * 0.7):
            report += "‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –§–∏–Ω–∞–Ω—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ\n"
        
        self.report_text.insert(1.0, report)
    
    def run(self):
        self.root.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = FinanceApp()
    app.run()